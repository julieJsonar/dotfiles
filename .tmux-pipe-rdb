#! /usr/bin/env ruby

class VimProxy
  @@server_name = :DEBUGGER_VIEWER
  @@sign_name = :db_indicator

  def init
    @last_sign_id = 1
    unless isVimServerRunning
      # start vim
      #%x{tmux -L main split-window -dv -p 70 'vim -R --servername #{@@server_name}'}
      #%x{tmux -L main split-window -dh 'vim -R --servername #{@@server_name}'}
      %x{tmux split-window -dh 'vim -R --servername #{@@server_name}'}

      wait_counter = 20 
      until isVimServerRunning || wait_counter <= 0 do 
        sleep 0.3
        wait_counter -= 1
      end

      if wait_counter <= 0
        return false
      end

      # define sign 
      sendCmd(%Q{:sign define #{@@sign_name} text=>> texthl=Search})
    end
    return true
  end

  def show(fname, lnum)
    locate(fname, lnum)
    setSign(fname, lnum)
  end

  def shutdown
    sendCmd(%Q{:qall}) 
  end

  protected

  def locate(fname, lnum)
    #%x{vim --servername #{@@server_name} --remote-silent +"call PutSignCurLine('#{fname}', #{lnum})" +#{lnum} #{fname}} 
    sendCmd(%Q{:silent edit +#{lnum} #{fname}})
  end

  def setSign(fname, lnum)
    new_sign_id = @last_sign_id == 1 ? 2 : 1
    [ 
      %Q{:norm zz<CR>},
      %Q{:exec 'sign place #{new_sign_id} line=#{lnum} name=#{@@sign_name} buffer=' . bufnr('%')<CR>},
      %Q{:sign unplace #{@last_sign_id}<CR>},
    ].each {|vcmd| sendCmd(vcmd) }
    @last_sign_id = new_sign_id
  end

  def sendCmd(vcmd)
    cmd = %Q{vim --servername #{@@server_name} --remote-send}
    %x{#{cmd} "#{vcmd}<CR>"}
  end

  def isVimServerRunning
    %x{vim --serverlist}.split.include?(@@server_name.to_s)
  end
end

proxy = VimProxy.new
proxy.init

Signal.trap("EXIT") do
  proxy.shutdown
end

last_match_time = Time.now

ARGF.each do |line|
  if line =~ /^(\/[^:]+):(\d+)/ && (Time.now - last_match_time) > 0.5
    proxy.show($1, $2) 
    last_match_time = Time.now
  end
end


