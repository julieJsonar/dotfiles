#!/usr/bin/expect
#
# info: Expect script login the server via telnet
#
# author: huawen.yu@gmail.com
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#

# config
log_user 1
set timeout 6
# the default logfile name only existed when 'mode=telnet'
#log_file -noappend "log.exp"

# Functions
## Functions - Usage
proc Usage { msg } {
    puts stderr "Usage: ($msg)"
    puts stderr "  sample: script 10.1.1.2 'admin' '' telnet "
    puts stderr "  sample: script 10.1.1.2 'admin' '' gdb"
    puts stderr "  - mode: host user pass \[mode=\[telnet\|gdb\|wad\|ips\]\]"
    puts stderr "  - mode: gdb"
    exit 1
}


## Functions - Telnet
set hostid "null"
proc Telnet { host user password } {
    global hostid

    spawn telnet $host
    set hostid $spawn_id

    set count 0;
    while {$count < 10 } {
        set count [expr $count+1];
        send_user "\|expect=$count\|"

        expect {
        "elcome" {
            send "\n"
        }
        "> " { return "ok" }
        "$ " { return "ok" }
        "# " { return "ok" }
        "ogin: " {
            send "$user\n"
        }
        "assword: " {
            send "$password\n"
        }
        "(yes/no)? " {
            send "yes\n"
        }
        default {
            send_user "Login failed\n"
            exit 1
        }
        }
    }
}


set conf_version     "null"
set conf_build_num   "null"
set conf_build_date  "null"
set conf_model_type  "null"
set conf_model_sn    "null"
set conf_vdom_status "null"
set conf_oper_mode   "null"
set conf_ha_mode     "null"
set conf_log_disk    "null"
set conf_debug       "null"

proc dut_status { dummy } {
    global hostid

    global conf_version
    global conf_build_num
    global conf_build_date
    global conf_model_type
    global conf_model_sn
    global conf_vdom_status
    global conf_oper_mode
    global conf_ha_mode
    global conf_log_disk
    global conf_debug

    send -i $hostid "sysctl echo hello\r"
    expect -i $hostid -re "Unknown action(.*) # " {
        set conf_debug "no"
    } -re "Command fail." {
        set conf_debug "no"
    } -re "hello(.*) # " {
        set conf_debug "yes"
    }

    send -i $hostid "get system status\n"
    # non-greed match by appending '?' to '*':
    expect -i $hostid -re "Version: (.*?) v(.*?),build(.*?),(.*?)\r" {
        set conf_model_type $expect_out(1,string)
        set conf_version $expect_out(2,string)
        set conf_build_num $expect_out(3,string)
        exp_continue
    } -re "Serial-Number: (.*?)\r" {
        set conf_model_sn $expect_out(1,string)
        exp_continue
    } -re "Log hard disk: (.*?)\r" {
        set conf_log_disk $expect_out(1,string)
        exp_continue
    } -re "Operation Mode: (.*?)\r" {
        set conf_oper_mode $expect_out(1,string)
        exp_continue
    } -re "Virtual domain configuration: (.*?)\r" {
        set conf_vdom_status $expect_out(1,string)
        exp_continue
    } -re "Current HA mode: (.*?)\r" {
        set conf_ha_mode $expect_out(1,string)
        exp_continue
    } -re "System time: (.*?)\r" {
        send "\r"
    } -ex "--More--" {
        send -i $hostid -- " "
        exp_continue
    }

    send_user "\n========STATUS========\n"
    send_user "conf_debug=($conf_debug)\n"
    send_user "conf_version=($conf_version)\n"
    send_user "conf_build_num=($conf_build_num)\n"
    send_user "conf_build_date=($conf_build_date)\n"
    send_user "conf_model_type=($conf_model_type)\n"
    send_user "conf_model_sn=($conf_model_sn)\n"
    send_user "conf_vdom_status=($conf_vdom_status)\n"
    send_user "conf_oper_mode=($conf_oper_mode)\n"
    send_user "conf_ha_mode=($conf_ha_mode)\n"
    send_user "conf_log_disk=($conf_log_disk)\n"
    send_user "=========END==========\n"
}



proc dut_sync_point { anchor } {
    global hostid
    global conf_model_sn

    send -i $hostid "sysctl echo \"$conf_model_sn echo $anchor\"\r"
    expect -i $hostid "$conf_model_sn echo $anchor"
}


proc dut_debug_init { dummy } {
    global hostid
    global conf_vdom_status

    if { $conf_vdom_status == "enable"} {
        send -i $hostid "c g\r"
    }

    send -i $hostid "config system global\r"
    send -i $hostid     "set admin-scp enable\r"
    send -i $hostid     "set admintimeout 480\r"
    send -i $hostid "end\r"

    send -i $hostid "diag debug dis\r"
    send -i $hostid "diag debug console no enable\r"
    send -i $hostid "diag ips debug disable all\r"
    send -i $hostid "diag wad debug clear\r"

    if { $conf_vdom_status == "enable"} {
        send -i $hostid "end\r"
    }
}


proc debug_wad { dummy } {
    global hostid
    global conf_vdom_status
    global arg_mode

    if { $conf_vdom_status == "enable"} {
        send -i $hostid "c g\r"
    }

    send -i $hostid "diag wad debug enable level verbose\r"
    send -i $hostid "diag wad debug enable cat all\r"
    send -i $hostid "diag wad debug display pid enable\r"
    send -i $hostid "diag debug crash read\r"
    send -i $hostid "diag debug en\r"
    #send -i $hostid "diag test app wad 2300\r"
    #send -i $hostid "diag test app wad 110\r"
    send_user "mode=$arg_mode, enable wad debug\n"
}


proc debug_ips { dummy } {
    global hostid
    global conf_vdom_status
    global arg_mode

    if { $conf_vdom_status == "enable"} {
        send -i $hostid "c g\r"
    }

    send -i $hostid "diag debug crash read\r"
    send -i $hostid "diag ips debug enable all\r"
    send -i $hostid "diag ips debug disable timeout\r"
    send -i $hostid "diag debug en\r"
    send_user "mode=$arg_mode, enable ips debug\n"
}


proc debug_user { dummy } {
    global hostid
    global conf_vdom_status
    global arg_mode

    if { $conf_vdom_status == "enable"} {
        send -i $hostid "c g\r"
    }

    send -i $hostid "diag debug en\r"
    set call [dut_sync_point "debuguser"]

    send -i $hostid "diag test app wad 1000\r"

    expect -i $hostid -re "^Process.*?: type=wanopt\((.*?)\) index=.*? pid=(.*?) state=.*?\r" {
        set gdb_wanopt_type $expect_out(1,string)
        send -i $hostid "wilson1\r"
        exp_continue
    } -re "^Process(.*)\r" {
        set gdb_worker_type $expect_out(1,string)
        send -i $hostid "wilson2\r"
        exp_continue
    } -re "^Process.*?: type=informer\((.*?)\) index=.*? pid=(.*?) state=.*?\r" {
        set gdb_informer_type $expect_out(1,string)
        send -i $hostid "wilson3\r"
        exp_continue
    } -re " # " {
        send -i $hostid "wilson4\r"
    } -ex "--More--" {
        send -i $hostid -- " "
        exp_continue
    }

    if {[info exists gdb_wanopt_type]} {
        send_user "\ngdb_wanopt_type=$gdb_wanopt_type\n"
        set cmdstr [format "diag test app wad 2%s00" $gdb_wanopt_type]
        send -i $hostid "$cmdstr\r"
        send -i $hostid "diag test app wad 110\r"
    }
    if {[info exists gdb_worker_type]} {
        send_user "\ngdb_worker_type=$gdb_worker_type\n"
        set cmdstr [format "diag test app wad 2%s00" $gdb_worker_type]
        send -i $hostid "$cmdstr\r"
        send -i $hostid "diag test app wad 110\r"
    }
    if {[info exists gdb_informer_type]} {
        send_user "\ngdb_informer_type=$gdb_informer_type\n"
        set cmdstr [format "diag test app wad 2%s00" $gdb_informer_type]
        send -i $hostid "$cmdstr\r"
        send -i $hostid "diag test app wad 110\r"
    }

    puts "==============worker user dump==================="
    send -i $hostid "diag test app wad 2200\r"
    send -i $hostid "diag test app wad 110\r"
    puts "================================="

    puts "==============informer user dump==================="
    send -i $hostid "diag test app wad 2400\r"
    send -i $hostid "diag test app wad 110\r"
    puts "================================="

    send -i $hostid "diag wad debug display pid enable\r"
    send -i $hostid "diag wad debug enable category auth\r"
}


proc start_common { dummy } {
    global argv
    global hostid
    global arg_count
    global host
    global user
    global password

    if { $arg_count < 3 } {
        set running [Usage "Argument host,user,passwd"]
    }

    #set hostid $spawn_id
    set call [Telnet $host $user $password]
    set call [dut_status ""]
    set call [dut_debug_init ""]
}


# main script
set arg_count [llength $argv]
if { $arg_count < 2 } {
    set call [Usage "Argument not enough."]
}

set host [lindex $argv 0]
set user [lindex $argv 1]
set password [lindex $argv 2]
if { $arg_count > 3 } {
    set arg_mode [lindex $argv 3]
} else {
    set arg_mode "telnet"
}

if { $arg_mode == "telnet"} {
    log_file -noappend "log.exp"
    set call [start_common ""]
} elseif { $arg_mode == "gdb" } {
    set call [start_common ""]
    if { $conf_vdom_status == "enable"} {
        send -i $hostid "c g\r"
    }

    send -i $hostid "diag debug en\r"
    send -i $hostid "diag test app wad 1000\r"

    expect -i $hostid -re "Process.*?: type=(wanopt|worker).*? index=.*? pid=(.*?) state=.*?\r" {set gdb_worker_pid $expect_out(2,string)}
    send_user "\ngdb_worker_pid=$gdb_worker_pid\n"

    # release version cannot debug
    send -i $hostid "sysctl echo hello\r"
    expect -i $hostid -re "Unknown action(.*) # " {
        send_user "Release version cannot start gdb debug!\n"
        exit 1
    } -re "hello(.*) # " {
        send -i $hostid "sys sh\r"
    }

    expect -i $hostid -re " # " { send -i $hostid "gdbserver :444 --attach $gdb_worker_pid\r"}
} else {
    log_file -noappend "log.exp"
    set call [start_common ""]
    send_user "arg_mode=$arg_mode\n"

    if {[regexp "wad" $arg_mode]} {
        set call [debug_wad ""]
    }

    if {[regexp "user" $arg_mode]} {
        set call [debug_user ""]
    }

    if {[regexp "ips" $arg_mode]} {
        set call [debug_ips ""]
    }
}


# Interact
if { $hostid != "null" } {
    interact -u $hostid
}

